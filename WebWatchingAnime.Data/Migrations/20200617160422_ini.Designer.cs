// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebWatchingAnime.Data.Context;

namespace WebWatchingAnime.Data.Migrations
{
    [DbContext(typeof(WebDbContext))]
    [Migration("20200617160422_ini")]
    partial class ini
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("WebWatchingAnime.Data.Entities.Anime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("EpisodesMax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<bool>("IsAnime")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEpisodes")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("OrderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SeasonId")
                        .HasColumnType("int");

                    b.Property<string>("SeasonName")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SrcTrailer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("SubId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("YearId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Animes");
                });

            modelBuilder.Entity("WebWatchingAnime.Data.Entities.AnimeCategory", b =>
                {
                    b.Property<int>("AnimeId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("AnimeId", "CategoryId");

                    b.ToTable("AnimeCategory");
                });

            modelBuilder.Entity("WebWatchingAnime.Data.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppRole");
                });

            modelBuilder.Entity("WebWatchingAnime.Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUser");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7b126afe-40cf-40df-a036-3cef880bd782"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f60615f-74e8-4d5c-93b1-72c8353cb88d",
                            Email = "dan@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "dandan@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEHNOOsEZrbvwTbZcH4V+waChsxTPRA1yozIc8XXl87+juIwuHuN7P4BItTLLg9WBsg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("f4db346b-3760-4c20-b8c8-76665732f710"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "caac12b1-3701-4c1f-a0d0-6c2ae8845777",
                            Email = "dan2@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "dandan2@gmail.com",
                            NormalizedUserName = "admin2",
                            PasswordHash = "AQAAAAEAACcQAAAAEK7PIUW3bQqztlc4zHRaE3R/BzouDnn5uNiMfxxg9CwVAmkOFv7zALQCOfPeY9vmeQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "admin2"
                        },
                        new
                        {
                            Id = new Guid("26fc06da-acf9-44a5-ad53-e6dd60051716"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0b683d0d-0543-419c-ace2-8ba0097a6df0",
                            Email = "dan3@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "dandan3@gmail.com",
                            NormalizedUserName = "admin3",
                            PasswordHash = "AQAAAAEAACcQAAAAEAB8UCJ7d7ZH/6UvGMf3RLCeeVHCm5h/oQPz34n15wkS4n8wdxO4ofBkq7FPHIOWfg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "admin3"
                        });
                });

            modelBuilder.Entity("WebWatchingAnime.Data.Entities.Catetgory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Hành động",
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            Name = "Tình cảm",
                            Status = true
                        },
                        new
                        {
                            Id = 3,
                            Name = "Lịch sử",
                            Status = true
                        },
                        new
                        {
                            Id = 4,
                            Name = "Hài hước",
                            Status = true
                        },
                        new
                        {
                            Id = 5,
                            Name = "Viễn tưởng",
                            Status = true
                        },
                        new
                        {
                            Id = 6,
                            Name = "Võ thuật",
                            Status = true
                        },
                        new
                        {
                            Id = 7,
                            Name = "Giả tưởng",
                            Status = true
                        },
                        new
                        {
                            Id = 8,
                            Name = "Kinh dị",
                            Status = true
                        },
                        new
                        {
                            Id = 9,
                            Name = "Đời thường",
                            Status = true
                        },
                        new
                        {
                            Id = 10,
                            Name = "Học đường",
                            Status = true
                        },
                        new
                        {
                            Id = 11,
                            Name = "Harem",
                            Status = true
                        },
                        new
                        {
                            Id = 12,
                            Name = "Ecchi",
                            Status = true
                        },
                        new
                        {
                            Id = 13,
                            Name = "Shounen",
                            Status = true
                        },
                        new
                        {
                            Id = 14,
                            Name = "Phép thuật",
                            Status = true
                        },
                        new
                        {
                            Id = 15,
                            Name = "Trò chơi",
                            Status = true
                        },
                        new
                        {
                            Id = 16,
                            Name = "Thám tử",
                            Status = true
                        },
                        new
                        {
                            Id = 17,
                            Name = "Mystery",
                            Status = true
                        },
                        new
                        {
                            Id = 18,
                            Name = "Drama",
                            Status = true
                        },
                        new
                        {
                            Id = 19,
                            Name = "Seinen",
                            Status = true
                        },
                        new
                        {
                            Id = 23,
                            Name = "Ác quỷ",
                            Status = true
                        },
                        new
                        {
                            Id = 24,
                            Name = "Psychological",
                            Status = true
                        },
                        new
                        {
                            Id = 20,
                            Name = "Quân đội",
                            Status = true
                        },
                        new
                        {
                            Id = 21,
                            Name = "Thể Thao",
                            Status = true
                        },
                        new
                        {
                            Id = 22,
                            Name = "Âm nhạc",
                            Status = true
                        });
                });

            modelBuilder.Entity("WebWatchingAnime.Data.Entities.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnimeId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("STT")
                        .HasColumnType("int");

                    b.Property<string>("Src")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("WebWatchingAnime.Data.Entities.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("WebWatchingAnime.Data.Entities.Sub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Subs");
                });

            modelBuilder.Entity("WebWatchingAnime.Data.Entities.Systems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descaription")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ImageCover")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<float>("Lat")
                        .HasColumnType("real");

                    b.Property<string>("LinkFaceBook")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkInstargram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Lng")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWebsite")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Node")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Systems");
                });

            modelBuilder.Entity("WebWatchingAnime.Data.Entities.Year", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasMaxLength(4);

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Year");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "2010",
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            Name = "2011",
                            Status = true
                        },
                        new
                        {
                            Id = 3,
                            Name = "2012",
                            Status = true
                        },
                        new
                        {
                            Id = 4,
                            Name = "2013",
                            Status = true
                        },
                        new
                        {
                            Id = 5,
                            Name = "2014",
                            Status = true
                        },
                        new
                        {
                            Id = 6,
                            Name = "2015",
                            Status = true
                        },
                        new
                        {
                            Id = 7,
                            Name = "2016",
                            Status = true
                        },
                        new
                        {
                            Id = 8,
                            Name = "2017",
                            Status = true
                        },
                        new
                        {
                            Id = 9,
                            Name = "2018",
                            Status = true
                        },
                        new
                        {
                            Id = 10,
                            Name = "2019",
                            Status = true
                        },
                        new
                        {
                            Id = 11,
                            Name = "2020",
                            Status = true
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
